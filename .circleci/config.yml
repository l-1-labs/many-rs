# many-rs CI
# The Lifted Initiative
version: 2.1

orbs:
  codecov: codecov/codecov@3.2.3
  rust: circleci/rust@1.6.0
  detect: circleci/os-detect@0.3.0
  bats: circleci/bats@1.0.0
  docker: circleci/docker@2.1.3

MANY_RUST_VERSION: &many_rust_version nightly-2023-01-03

executors:
  linux2204:
    machine:
      image: ubuntu-2204:current
    resource_class: large
  macos:
    macos:
      xcode: 13.4.1
    resource_class: medium

jobs:
  lint-test-build:
    parameters:
      os:
        type: string
      many_rust_version:
        type: string
    executor: << parameters.os >>
    environment:
      - PKCS11_SOFTHSM2_MODULE: /usr/lib/softhsm/libsofthsm2.so
      - SOFTHSM2_CONF: /tmp/softhsm2.conf
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-build-{{ .Environment.MANY_RS_CACHE_VERSION }}-{{ arch }}-{{ checksum "Cargo.lock" }}
      - rust/install:
          version: << parameters.many_rust_version >>
      - rust/format:
          with_cache: false
      - rust/clippy:
          flags: --all-targets --all-features -- -D clippy::all
          with_cache: false
      - when:
          condition:
            equal: [ "linux2204", << parameters.os >> ]
          steps:
            - rust/test:
                package: --all-targets --all-features
                with_cache: false
      - when:
          condition:
            equal: [ "macos", << parameters.os >> ]
          steps:
            - rust/test:
                # Exclude HSM tests as we are not configured in MacOS for them.
                package: --workspace --all-targets --all-features --exclude many-identity-hsm
                with_cache: false
      - rust/test:
          package: --all-features --doc
          with_cache: false
      - rust/build:
          crate: --all-features
          with_cache: false
      - save_cache:
          key: cargo-build-{{ .Environment.MANY_RS_CACHE_VERSION }}-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/bin/
            - ~/.cargo/registry/index/
            - ~/.cargo/registry/cache/
            - ~/.cargo/git/db/
            - target/
  bats:
    parameters:
      os:
        type: string
      many_rust_version:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-build-{{ .Environment.MANY_RS_CACHE_VERSION }}-{{ arch }}-{{ checksum "Cargo.lock" }}
      - rust/install:
          version: << parameters.many_rust_version >>
      - run:
          name: install cbor-diag
          command: cargo install --force cbor-diag-cli
      - bats/install
      - run:
          name: running BATs tests
          no_output_timeout: 20m
          command: bats *
          working_directory: ./tests/e2e/
  dev_release_artifact:
    parameters:
      os:
        type: string
      many_rust_version:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - detect/init
      - rust/install:
          version: << parameters.many_rust_version >>
      - rust/build:
          release: true
          with_cache: false
      - run: mkdir -p artifacts
      - run:
          name: creating release archive
          command: file target/release/* | grep 'executable\|shared object' | cut -d ':' -f 1 | xargs tar czvf artifacts/many-rs_PR_${CIRCLE_PR_NUMBER}_${CIRCLE_SHA1}_${OSD_ID}_${OSD_VERSION}.tar.gz
      - run:
          name: creating release shasum
          command: shasum artifacts/many-rs_PR_${CIRCLE_PR_NUMBER}_${CIRCLE_SHA1}_${OSD_ID}_${OSD_VERSION}.tar.gz > artifacts/shasum_PR_${CIRCLE_PR_NUMBER}_${CIRCLE_SHA1}_${OSD_ID}_${OSD_VERSION}.txt
      - store_artifacts:
          path: artifacts
  coverage:
    parameters:
      os:
        type: string
      many_rust_version:
        type: string
    executor: << parameters.os >>
    working_directory: ~/project/repo
    environment:
      - PKCS11_SOFTHSM2_MODULE: /usr/lib/softhsm/libsofthsm2.so
      - SOFTHSM2_CONF: /tmp/softhsm2.conf
    steps:
      - checkout
      - restore_cache:
          keys:
            - cargo-coverage-{{ .Environment.MANY_RS_CACHE_VERSION }}-{{ arch }}-{{ checksum "Cargo.lock" }}
      - rust/install:
          version: << parameters.many_rust_version >>
      - run:
          name: install llvm-tools-preview
          command: rustup component add llvm-tools-preview
      - run:
          name: generate test coverage
          command: cargo test --all-targets --all-features
          environment:
            RUSTFLAGS: "-C instrument-coverage"
            LLVM_PROFILE_FILE: "coverage/lcov-%p-%m.profraw"
      - run:
          name: generate coverage report
          command: grcov src -b target/debug/ -s . --keep-only 'src/**' --prefix-dir $PWD -t lcov --branch --ignore-not-existing -o coverage/report.lcov
      - codecov/upload:
          file: coverage/report.lcov
      - save_cache:
          key: cargo-coverage-{{ .Environment.MANY_RS_CACHE_VERSION }}-{{ arch }}-{{ checksum "Cargo.lock" }}
          paths:
            - ~/.cargo/bin/
            - ~/.cargo/registry/index/
            - ~/.cargo/registry/cache/
            - ~/.cargo/git/db/
            - target/
  create:
    parameters:
      os:
        type: string
      many_rust_version:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - detect/init
      - rust/install:
          version: << parameters.many_rust_version >>
      - rust/build:
          release: true
          with_cache: false
      - run: mkdir -p artifacts
      - run:
          name: creating release archive
          command: file target/release/* | grep 'executable\|shared object' | cut -d ':' -f 1 | xargs tar czvf artifacts/many-rs_${CIRCLE_TAG}_${CIRCLE_SHA1}_${OSD_ID}_${OSD_VERSION}.tar.gz
      - run:
          name: creating release shasum
          command: shasum artifacts/many-rs_${CIRCLE_TAG}_${CIRCLE_SHA1}_${OSD_ID}_${OSD_VERSION}.tar.gz > artifacts/shasum_${CIRCLE_TAG}_${CIRCLE_SHA1}_${OSD_ID}_${OSD_VERSION}.txt
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*.tar.gz"
            - "*.txt"
  publish:
    parameters:
      pre-release:
        type: boolean
        default: false
    docker:
      - image: cibuilds/github:0.10
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/project/artifacts
      - when:
          condition:
            not: << parameters.pre-release >>
          steps:
            - run:
                name: publish pre-release
                command: ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} ~/project/artifacts
      - when:
          condition: << parameters.pre-release >>
          steps:
            - run:
                name: publish pre-release
                command: ghr -prerelease -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} ~/project/artifacts
  audit:
    docker:
      - image: rust:latest
    resource_class: small
    steps:
      - checkout
      - run:
          name: install cargo-audit
          command: cargo install cargo-audit
      - run:
          name: cargo audit
          command: cargo audit
  publish_nightly_docker:
    executor: linux2204
    parameters:
      many_rust_version:
        type: string
    resource_class: large
    steps:
      - docker/check
      - checkout:
          path: many-rs
      - restore_cache:
          keys:
            - nightly-docker-{{ .Environment.MANY_RS_CACHE_VERSION }}-{{ arch }}-{{ checksum "many-rs/Cargo.lock" }}
      - run:
          name: restoring `nix-store`
          command: |
            if [[ -f "backup.tar" ]]; then
              docker run --rm -v nix-store:/nix -v $(pwd):/backup ubuntu tar xf /backup/backup.tar -C /
            else
              echo "nix-store backup unavailable; skipping."
            fi
      - rust/install:
          version: << parameters.many_rust_version >>
      - run:
          name: build docker images
          command: |
            cd many-rs/docker/e2e
            make Cargo.nix many/many-abci many/many-ledger many/many-kvstore
            docker tag lifted/many-ledger:latest lifted/many-ledger:nightly
            docker tag lifted/many-abci:latest lifted/many-abci:nightly
            docker tag lifted/many-kvstore:latest lifted/many-kvstore:nightly
            docker tag lifted/many-ledger:latest lifted/many-ledger:$CIRCLE_SHA1
            docker tag lifted/many-abci:latest lifted/many-abci:$CIRCLE_SHA1
            docker tag lifted/many-kvstore:latest lifted/many-kvstore:$CIRCLE_SHA1
      - docker/push:
          image: many-abci
          registry: lifted
          tag: "nightly,$CIRCLE_SHA1"
          step-name: "docker push lifted/many-abci"
      - docker/push:
          image: many-ledger
          registry: lifted
          tag: "nightly,$CIRCLE_SHA1"
          step-name: "docker push lifted/many-ledger"
      - docker/push:
          image: many-kvstore
          registry: lifted
          tag: "nightly,$CIRCLE_SHA1"
          step-name: "docker push lifted/many-kvstore"
      - run:
          name: exporting `nix-store` docker volume
          command: |
            docker run --rm -v nix-store:/nix -v $(pwd):/backup ubuntu tar cf /backup/backup.tar /nix
      - save_cache:
          key: nightly-docker-{{ .Environment.MANY_RS_CACHE_VERSION }}-{{ arch }}-{{ checksum "many-rs/Cargo.lock" }}
          paths:
            - backup.tar
  resiliency_tests:
    executor: linux2204
    parameters:
      many_rust_version:
        type: string
    resource_class: large
    steps:
      - checkout
      - rust/install:
          version: << parameters.many_rust_version >>
      - rust/build:
          crate: --all-features
          with_cache: false
      - bats/install
      - docker/pull:
          images: "lifted/many-ledger:nightly,lifted/many-kvstore:nightly,lifted/many-abci:nightly"
      - run:
          name: running BATs tests
          # https://support.circleci.com/hc/en-us/articles/360046544433-Makefile-Command-Inconsistencies
          shell: /bin/bash
          no_output_timeout: 20m
          command: bats *
          working_directory: ./tests/resiliency
  tag:
    parameters:
      tag:
        type: string
        default: ${CIRCLE_TAG}
      branch:
        type: string
        default: main
    docker:
      - image: 'cimg/base:stable'
    resource_class: small
    steps:
      - checkout
      - run:
          name: tag
          command: |
            git config credential.helper 'cache --timeout=120'
            git config user.email "build@liftedinit.org"
            git config user.name "ll-build"
            git tag -f << parameters.tag >> << parameters.branch >>
            git push -f -q https://${GITHUB_TOKEN}@github.com/liftedinit/many-rs.git << parameters.tag >>

# Re-usable commands
commands:
  install-deps:
    description: install << parameters.os >> dependencies
    parameters:
      os:
        type: string
    steps:
      - when:
          condition:
            matches: { pattern: "^linux.*$", value: << parameters.os >> }
          steps:
            - run:
                name: installing << parameters.os >> dependencies
                command: |
                  sudo DEBIAN_FRONTEND=noninteractive apt -y update
                  sudo DEBIAN_FRONTEND=noninteractive apt -y install build-essential pkg-config clang libssl-dev libsofthsm2 libudev-dev libusb-1.0-0-dev
                  mkdir /tmp/tokens
                  echo "directories.tokendir = /tmp/tokens" > /tmp/softhsm2.conf
            - run:
                name: installing grcov
                command: wget https://github.com/mozilla/grcov/releases/download/v0.8.11/grcov-x86_64-unknown-linux-gnu.tar.bz2 -O - | sudo tar -xj -C /usr/local/bin

workflows:
  ci:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - lint-test-build:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: lint-test-build-v<< matrix.os >>
          context:
            - CACHE
          matrix:
            parameters:
              os: [linux2204]
              many_rust_version: [*many_rust_version]
      - bats:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: bats-v<< matrix.os >>
          context:
            - CACHE
          matrix:
            parameters:
              os: [linux2204]
              many_rust_version: [*many_rust_version]
          requires:
            - lint-test-build-v<< matrix.os >>
      - coverage:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: coverage-v<< matrix.os >>
          context:
            - CACHE
          matrix:
            parameters:
              os: [linux2204]
              many_rust_version: [*many_rust_version]
          requires:
            - lint-test-build-v<< matrix.os >>
      - dev_release_artifact:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: dev_release_artifact-v<< matrix.os >>
          matrix:
            parameters:
              os: [linux2204]
              many_rust_version: [*many_rust_version]
          requires:
            - lint-test-build-v<< matrix.os >>
            - bats-v<< matrix.os >>
          filters:
            branches:
              ignore: main
              only: /^pull\/[0-9]+$/
  release:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - create:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: create-v<< matrix.os >>
          matrix:
            parameters:
              os: [linux2204]
              many_rust_version: [*many_rust_version]
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^\d+\.\d+\.\d+$/                 # e.g., 0.1.1, 1.0.0
                - /^\d+\.\d+\.\d+-(alpha|beta)$/    # e.g., 0.1.1-alpha, 2.3.1-beta
                - /^\d+\.\d+\.\d+-.*-rc.*$/         # e.g., 0.1.1-alpha-rc1, 1.3.4-beta-rc4
                - /^\d+\.\d+\.\d+-pre.*$/           # e.g., 0.1.1-prealpha-3, 1.5.6-prealpha-8
      - publish:
          name: publish
          pre-release: false
          context:
            - GITHUB_CREDS
          requires:
            - create
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^\d+\.\d+\.\d+$/                 # e.g., 0.1.1, 1.0.0
                - /^\d+\.\d+\.\d+-(alpha|beta)$/    # e.g., 0.1.1-alpha, 2.3.1-beta
      - publish:
          name: publish-pre-release
          pre-release: true
          context:
            - GITHUB_CREDS
          requires:
            - create
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^\d+\.\d+\.\d+-.*-rc.*$/         # e.g., 0.1.1-alpha-rc1, 1.3.4-beta-rc4
                - /^\d+\.\d+\.\d+-pre.*$/           # e.g., 0.1.1-prealpha-3, 1.5.6-prealpha-8
  security:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "Audit", << pipeline.schedule.name >> ]
    jobs:
      - audit
  nightly_docker_and_resiliency_tests:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "Nightly Docker and Resiliency Tests", << pipeline.schedule.name >> ]
    jobs:
      - publish_nightly_docker:
          pre-steps:
            - install-deps:
                os: linux2204
          context:
            - DOCKER_CREDS
            - CACHE
          filters:
            branches:
              only:
                - main
          many_rust_version: *many_rust_version
      - resiliency_tests:
          pre-steps:
            - install-deps:
                os: linux2204
          filters:
            branches:
              only:
                - main
          many_rust_version: *many_rust_version
          requires:
            - publish_nightly_docker
  nightly_macos:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "macOS nightly", << pipeline.schedule.name >> ]
    jobs:
      - lint-test-build:
          name: lint-test-build-v<< matrix.os >>
          context:
            - CACHE
          matrix:
            parameters:
              os: [macos]
              many_rust_version: [*many_rust_version]
      - bats:
          name: bats-v<< matrix.os >>
          context:
            - CACHE
          matrix:
            parameters:
              os: [macos]
              many_rust_version: [*many_rust_version]
          requires:
            - lint-test-build-v<< matrix.os >>
      - tag:
          name: macos nightly tag
          tag: macos-green
          context:
            - GITHUB_CREDS
          requires:
            - lint-test-build-vmacos
            - bats-vmacos
