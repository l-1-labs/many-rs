# many-rs CI
# The Lifted Initiative
version: 2.1

orbs:
  codecov: codecov/codecov@3.2.4
  detect: circleci/os-detect@0.3.0
  docker: circleci/docker@2.2.0
  rust: circleci/rust@1.6.0

executors:
  linux2204:
    docker:
      - image: cimg/rust:1.67
    resource_class: xlarge # 8 cores, 16Gb
  linux2204_machine:
    machine:
      image: ubuntu-2204:current
    resource_class: large # 4 cores, 15Gb
  macos:
    macos:
      xcode: 14.2.0
    resource_class: macos.x86.medium.gen2 # 4 cores, 8Gb

MANY_HSM_CONFIG: &many_hsm_config
  - PKCS11_SOFTHSM2_MODULE: /usr/lib/softhsm/libsofthsm2.so
  - SOFTHSM2_CONF: /tmp/softhsm2.conf

jobs:
  # Perform lint and tests. Push the compiled binaries to the next step.
  lint-test-build:
    parameters:
      os:
        type: string
    executor: << parameters.os >>
    environment:
      *many_hsm_config
    steps:
      - checkout
      - when:
          condition:
            equal: [ "linux2204", << parameters.os >> ]
          steps:
            - run:
                name: rustfmt, clippy, build and tests and doc tests (linux)
                command: |
                  bazel test \
                    --jobs=8 \
                    --config=remote-cache \
                    --config=all-features \
                    --config=clippy \
                    --config=rustfmt \
                    --test_env=PKCS11_SOFTHSM2_MODULE \
                    --test_env=SOFTHSM2_CONF \
                    -- //...
      - when:
          condition:
            equal: [ "macos", << parameters.os >> ]
          steps:
            - run:
                name: tests and doc tests (macos)
                # Exclude HSM tests as we are not configured in MacOS for them.
                command: |
                  bazel test \
                    --jobs=4 \
                    --config=remote-cache \
                    --config=all-features \
                    -- //... -//src/many-identity-hsm:many-identity-hsm-test

  # Run e2e bats tests using the binaries build from the previous step.
  bats:
    parameters:
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - when:
          condition:
            equal: [ "macos", << parameters.os >> ]
          steps:
            - rust/install
      - run:
          name: install cbor-diag
          command: cargo install --force cbor-diag-cli
      - run:
          name: running tests
          command: |
              bazel test --config=all-features --config=remote-cache //tests/e2e/kvstore:bats-e2e-kvstore
              bazel test --config=all-features --config=remote-cache //tests/e2e/ledger:bats-e2e-ledger
            
              # --disable_token_sender_check needs to be disabled for the token tests
              bazel test --balance_testing --migration_testing --config=remote-cache //tests/e2e/ledger:bats-e2e-ledger-tokens

  # Compute code coverage and push the results to CodeCov.
  coverage:
    parameters:
      os:
        type: string
    executor: << parameters.os >>
    environment:
      *many_hsm_config
    steps:
      - checkout
      - run:
          name: coverage
          command: |
            bazel coverage \
              --jobs=8 \
              --config=remote-cache \
              --config=all-features \
              --test_env=PKCS11_SOFTHSM2_MODULE \
              --test_env=SOFTHSM2_CONF \
              --combined_report=lcov \
              -- //...
      - codecov/upload:
          file: bazel-out/_coverage/_coverage_report.dat

  # Create a developer's release build. Useful to test PRs on development networks.
  dev_release:
    parameters:
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - build_release:
          release_id: ${CIRCLE_PR_NUMBER}
      - store_artifacts:
          path: artifacts

  # Create a release build
  create:
    parameters:
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - build_release:
          release_id: ${CIRCLE_TAG}
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*.tar.gz"
            - "*.txt"

  # Push a (pre-)release build to GitHub
  publish:
    parameters:
      pre-release:
        type: boolean
        default: false
    docker:
      - image: cibuilds/github:0.10
    resource_class: medium
    steps:
      - attach_workspace:
          at: ~/project/artifacts
      - when:
          condition:
            not: << parameters.pre-release >>
          steps:
            - run:
                name: publish pre-release
                command: ghr -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} ~/project/artifacts
      - when:
          condition: << parameters.pre-release >>
          steps:
            - run:
                name: publish pre-release
                command: ghr -prerelease -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_TAG} ~/project/artifacts

  # Security audit
  audit:
    executor: linux2204
    resource_class: small
    steps:
      - checkout
      - run:
          name: install cargo-audit
          command: cargo install cargo-audit
      - run:
          name: cargo audit
          command: cargo audit

  # Publish nightly Docker images. Used in resiliency tests.
  publish_nightly_docker:
    executor: linux2204_machine
    steps:
      - docker/check
      - checkout
      - run:
          name: publish nightly docker images
          command: |
              bazel run --jobs=$(nproc) --config=remote-cache //docker:many-abci-push-docker 
              bazel run --jobs=$(nproc) --config=remote-cache //docker:many-kvstore-push-docker
              bazel run --jobs=$(nproc) --config=remote-cache //docker:many-ledger-push-docker

  # Perform kvstore resiliency testing
  kvstore_resiliency_tests:
    executor: linux2204_machine
    parallelism: 4
    steps:
      - checkout
      - run:
          name: running all tests
          command: |
            TEST=$(circleci tests glob "tests/resiliency/kvstore/*.bats" | circleci tests split)
            A=($TEST)
            B=${A[@]/#///}
            C=${B[@]//kvstore\//kvstore:bats-resiliency-kvstore_}
            D=${C[@]//.bats/}

            bazel test --config=remote-cache $D

  # Run a single kvstore resiliency test
  kvstore_resiliency_single_test:
    executor: linux2204_machine
    parameters:
      test_name:
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: running single tests
          command: bazel test --config=remote-cache //tests/resiliency/kvstore:bats-resiliency-kvstore_<< parameters.test_name >>

  # Perform ledger resiliency testing
  ledger_resiliency_tests:
    executor: linux2204_machine
    parallelism: 4
    steps:
      - checkout
      - run:
          name: running all tests
          command: |
            TEST=$(circleci tests glob "tests/resiliency/ledger/*.bats" | circleci tests split)
            A=($TEST)
            B=${A[@]/#///}
            C=${B[@]//ledger\//ledger:bats-resiliency-ledger_}
            D=${C[@]//.bats/}
            
            bazel test --config=remote-cache --config=bats-resiliency-ledger $D

  # Run a single ledger resiliency test
  ledger_resiliency_single_test:
    executor: linux2204_machine
    parameters:
      test_name:
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: running single tests
          command: bazel test --config=remote-cache --config=bats-resiliency-ledger //tests/resiliency/ledger:bats-resiliency-ledger_<< parameters.test_name >>

  # Push a tag to GitHub
  tag:
    parameters:
      tag:
        type: string
        default: ${CIRCLE_TAG}
      branch:
        type: string
        default: main
    docker:
      - image: 'cimg/base:stable'
    resource_class: small
    steps:
      - checkout
      - run:
          name: tag
          command: |
            git config credential.helper 'cache --timeout=120'
            git config user.email "build@liftedinit.org"
            git config user.name "ll-build"
            git tag -f << parameters.tag >> << parameters.branch >>
            git push -f -q https://${GITHUB_TOKEN}@github.com/liftedinit/many-rs.git << parameters.tag >>

# Re-usable commands
commands:
  # Install executor's dependencies
  install-deps:
    description: install << parameters.os >> dependencies
    parameters:
      os:
        type: string
    steps:
      - when:
          condition:
            matches: { pattern: "^linux.*$", value: << parameters.os >> }
          steps:
            - run:
                name: installing << parameters.os >> dependencies
                command: |
                  sudo DEBIAN_FRONTEND=noninteractive apt -y update
                  sudo DEBIAN_FRONTEND=noninteractive apt -y install clang libssl-dev libsofthsm2 libudev-dev libusb-1.0-0-dev bsdextrautils
                  mkdir /tmp/tokens
                  echo "directories.tokendir = /tmp/tokens" > /tmp/softhsm2.conf
            - run:
                name: installing Bazel build dependencies
                command: |
                  # GCC 12 is needed to build `librocksdb-sys` with the `-Wno-error=coverage-invalid-line-number` CXXFLAGS (Bazel)
                  sudo DEBIAN_FRONTEND=noninteractive apt -y install gcc-12 g++-12
                  sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 11
                  sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 11
                  sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 12
                  sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 12
            - run:
                name: installing bazelisk
                command: |
                  wget https://github.com/bazelbuild/bazelisk/releases/download/v1.16.0/bazelisk-linux-amd64
                  chmod +x bazelisk-linux-amd64 
                  sudo mv bazelisk-linux-amd64 /usr/local/bin/bazel
      - when:
          condition:
            equal: [ "macos", << parameters.os >> ]
          steps:
            - run:
                name: installing bazelisk
                command: |
                  curl -L -O https://github.com/bazelbuild/bazelisk/releases/download/v1.16.0/bazelisk-darwin-amd64 
                  chmod +x bazelisk-darwin-amd64 
                  sudo mv bazelisk-darwin-amd64 /usr/local/bin/bazel

  # Build a release package and compute its shasum.
  build_release:
    description: build release
    parameters:
      release_id:
        type: string
        default: dev
    steps:
      - detect/init
      - run: mkdir -p artifacts
      - run:
          name: build release
          command: |
            bazel build -c opt --linkopt=-Wl,--strip-all --config=remote-cache //:many-rs-tar
            bazel cquery :many-rs-tar --output=files -c opt | xargs -n 1 -I % mv % artifacts/many-rs_<< parameters.release_id >>_${CIRCLE_SHA1}_${OSD_ID}_${OSD_VERSION}.tar.gz
      - run:
          name: creating release shasum
          command: shasum artifacts/many-rs_<< parameters.release_id >>_${CIRCLE_SHA1}_${OSD_ID}_${OSD_VERSION}.tar.gz > artifacts/shasum_<< parameters.release_id >>_${CIRCLE_SHA1}_${OSD_ID}_${OSD_VERSION}.txt

parameters:
  run_resiliency:
    type: boolean
    default: false

  run_ledger_resiliency:
    type: boolean
    default: false

  run_kvstore_resiliency:
    type: boolean
    default: false

  test_name:
    type: string
    default: ""

workflows:
  ci:
    when:
      equal: [ webhook, << pipeline.trigger_source >> ]
    jobs:
      - lint-test-build:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: lint-test-build-v<< matrix.os >>
          matrix:
            parameters:
              os: [linux2204]
      - bats:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: bats-v<< matrix.os >>
          matrix:
            parameters:
              os: [linux2204]
          requires:
            - lint-test-build-v<< matrix.os >>
      - coverage:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: coverage-v<< matrix.os >>
          matrix:
            parameters:
              os: [linux2204]
          requires:
            - lint-test-build-v<< matrix.os >>
      - dev_release:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: dev_release-v<< matrix.os >>
          matrix:
            parameters:
              os: [linux2204]
          requires:
            - lint-test-build-v<< matrix.os >>
  release:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - create:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: create-v<< matrix.os >>
          matrix:
            parameters:
              os: [linux2204]
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^\d+\.\d+\.\d+$/                 # e.g., 0.1.1, 1.0.0
                - /^\d+\.\d+\.\d+-(alpha|beta)$/    # e.g., 0.1.1-alpha, 2.3.1-beta
                - /^\d+\.\d+\.\d+-.*-rc.*$/         # e.g., 0.1.1-alpha-rc1, 1.3.4-beta-rc4
                - /^\d+\.\d+\.\d+-pre.*$/           # e.g., 0.1.1-prealpha-3, 1.5.6-prealpha-8
      - publish:
          name: publish
          pre-release: false
          context:
            - GITHUB_CREDS
          requires:
            - create
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^\d+\.\d+\.\d+$/                 # e.g., 0.1.1, 1.0.0
                - /^\d+\.\d+\.\d+-(alpha|beta)$/    # e.g., 0.1.1-alpha, 2.3.1-beta
      - publish:
          name: publish-pre-release
          pre-release: true
          context:
            - GITHUB_CREDS
          requires:
            - create
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /^\d+\.\d+\.\d+-.*-rc.*$/         # e.g., 0.1.1-alpha-rc1, 1.3.4-beta-rc4
                - /^\d+\.\d+\.\d+-pre.*$/           # e.g., 0.1.1-prealpha-3, 1.5.6-prealpha-8
  security:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "Audit", << pipeline.schedule.name >> ]
    jobs:
      - audit
  nightly_docker_and_resiliency_tests:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "Nightly Docker and Resiliency Tests", << pipeline.schedule.name >> ]
    jobs:
      - publish_nightly_docker:
          pre-steps:
            - install-deps:
                os: linux2204_machine
          context:
            - DOCKER_CREDS
      - kvstore_resiliency_tests:
          pre-steps:
            - install-deps:
                os: linux2204_machine
      - ledger_resiliency_tests:
          pre-steps:
            - install-deps:
                os: linux2204_machine

  kvstore_resiliency_tests:
    when:
      and:
        - not: << pipeline.parameters.test_name >>
        - equal: [ api, << pipeline.trigger_source >> ]
        - or:
          - equal: [ true, << pipeline.parameters.run_kvstore_resiliency >> ]
          - equal: [ true, << pipeline.parameters.run_resiliency >> ]
    jobs:
      - kvstore_resiliency_tests:
          pre-steps:
            - install-deps:
                os: linux2204_machine

  kvstore_resiliency_single_test:
    when:
      and:
        - << pipeline.parameters.test_name >>
        - equal: [ api, << pipeline.trigger_source >> ]
        - or:
            - equal: [ true, << pipeline.parameters.run_kvstore_resiliency >> ]
            - equal: [ true, << pipeline.parameters.run_resiliency >> ]
    jobs:
      - kvstore_resiliency_single_test:
          pre-steps:
            - install-deps:
                os: linux2204_machine
          test_name: << pipeline.parameters.test_name >>

  ledger_resiliency_tests:
    when:
      and:
        - not: << pipeline.parameters.test_name >>
        - equal: [ api, << pipeline.trigger_source >> ]
        - or:
          - equal: [ true, << pipeline.parameters.run_ledger_resiliency >> ]
          - equal: [ true, << pipeline.parameters.run_resiliency >> ]
    jobs:
      - ledger_resiliency_tests:
          pre-steps:
            - install-deps:
                os: linux2204_machine

  ledger_resiliency_single_test:
    when:
      and:
        - << pipeline.parameters.test_name >>
        - equal: [ api, << pipeline.trigger_source >> ]
        - or:
            - equal: [ true, << pipeline.parameters.run_ledger_resiliency >> ]
    jobs:
      - ledger_resiliency_single_test:
          pre-steps:
            - install-deps:
                os: linux2204_machine
          test_name: << pipeline.parameters.test_name >>

  nightly_macos:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "macOS nightly", << pipeline.schedule.name >> ]
    jobs:
      - lint-test-build:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: lint-test-build-v<< matrix.os >>
          matrix:
            parameters:
              os: [macos]
      - bats:
          pre-steps:
            - install-deps:
                os: << matrix.os >>
          name: bats-v<< matrix.os >>
          matrix:
            parameters:
              os: [macos]
          requires:
            - lint-test-build-v<< matrix.os >>
      - tag:
          name: macos nightly tag
          tag: macos-green
          context:
            - GITHUB_CREDS
          requires:
            - lint-test-build-vmacos
            - bats-vmacos
